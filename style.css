
* {
    margin: 0;
    padding: 0;
}

header, footer {
    width: 100%;
    height: 15vh;
    border: 1px solid black;
    background: black;
    color: white;
}

main {
    width: 100%;
    height: 100vh;
}

aside {
    border: 1px solid black;
}

header {
    display: grid;
    grid-template-columns: 10% 1fr 10%;
    justify-items: end;
    align-items: center;
}

/* Outra maneira para atingir o mesmo resultado:

body {
    display: grid;
    grid-template-rows: 15vh 70vh 15vh;
    justify-content: space-between;
} */

main {
    display: grid;
    grid-template-columns: 1fr 2.5fr 1fr; /* Tamb√©m posso usar n√∫meros quebrados. Al√©em disso essa outra main est√° sobrescrevendo a main anterior que escrevi nesse mesmo c√≥digo, v√°rios bugs podem acontecer por causa disso. */
}

/* Exerc√≠cio de Fixa√ß√£o:

Utilizando o site do exerc√≠cio anterior, implemente na sua p√°gina: 
  - Fa√ßa com que esses cards quebrem a linha caso falte espa√ßo dispon√≠vel
  - √â obrigat√≥rio estarem num container com display grid */ 


 Existe essa forma de fazer: 

.content-container article {
    display: grid;
    grid-template-columns: 50% 50%;
    grid-template-rows: 30% 70%;
}

.gallery {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 0 2rem;
    column-span: 2;
}

/* E essa outra forma: 

main {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    grid-template-rows: 1fr 2fr 1fr;
}

.gallery {
    display: grid;
    grid-template-columns: auto auto auto;
    grid-gap: 10px;
    text-align: center;
    margin: 20px;
}*/

------------------------------------------------------------------

/* - grid-template-rows: Define a quantidade e tamanho das linhas;
- grid-template-columns: Define a quantidade e tamanho das colunas;j
- grid-template: Vers√£o resumida, que combina as duas propriedades anteriores;

Nesse momento √© importante pensar em unidades de medida que ajudem a organizar o tamanho do grid desde o in√≠cio. Podemos usar pixels, vw, e outras medidas que j√° vimos. No entanto, o grid tem uma medida muito interessante, pensada apenas para ele: o `fr`. fr representa uma fra√ß√£o do espa√ßo restante. Primeiro os espa√ßos com medidas fixas s√£o definidos, e o que sobrar vai pro fr 

O container do exemplo tem 500px x 500px. Sabendo disso, vamos entender o processo, come√ßando pelas propriedades de template grid do cont√™iner:

Vamos primeiro entender a divis√£o das linhas. 

- 500px est√£o divididos em 4 partes (ou fra√ß√µes). A primeira linha ocupa 2fr, e cada uma das outras linhas ocupa 1fr. 500px/4 = 125px por fra√ß√£o
- Linha 1: 250px, pois s√£o 2fr
- Linhas 2 e 3: 125px

Agora as colunas:

- Temos 500px, e uma das colunas est√° com valor em pixels. Primeiro resolvemos esta coluna, para dividir o restante em fra√ß√µes. Ent√£o 500-100=400px restantes;
- Agora temos 400px para dividir entre 2 partes. 400/2 = 200px cada fr
- Colunas 1 e 2: 200px (1fr)
- Coluna 3: 100px (fixo)

üí° N√£o precisa se preocupar muito com as contas! V√° acompanhando o resultado na tela ao fazer, e alterando quando necess√°rio 

um resum√£o de tudo que foi passado at√© aqui:

- Use¬†`display: grid;`¬†para criar um grid.
- Use `grid-template` para definir quantas colunas e linhas existir√£o, e quais ser√£o seus tamanhos.
- Use `fr` para usar **fra√ß√µes** de tamanho do grid, para dividir os espa√ßos igualmente.
- Use¬†`justify-items`¬†para definir o alinhamento das linhas.
- Use¬†`align-items`¬†para definir o alinhamento das colunas.
- Use¬†`grid-gap` para criar espa√ßos entre os itens do cont√™iner
- Use¬†`justify-self`¬†para alinhar elementos individuais no eixo das linhas.
- Use¬†`align-self`¬†para alinhar elementos individuais no eixo das colunas.
- Use `grid-row` e `grid-column` para definir tamanhos personalizados dentro de um grid existente.

Novamente, lembre-se que tudo isso s√£o formas de dizer para o navegador como ele deve exibir elementos HTML. A parte mais complicada vem antes de escrever, √© a parte de entender, conceitualmente, o layout da p√°gina, e os comportamentos que devem ser definidos para a disposi√ß√£o dos itens.

Quando um time de design te entregar um *mock* de como a p√°gina deve ficar, sua primeira tarefa deve ser desenhar um monte de caixinhas, e pensar em como elas devem se tocar, se empilhar, esticar, encolher etc. Com isso feito, a√≠ sim devemos usar as t√©cnicas aprendidas neste documento.

Al√©m disso, lembre-se que Grid e Flex n√£o s√£o **competidores**, e sim **complementares**. N√≥s podemos usar ambos ao mesmo tempo em nossos projetos!*/